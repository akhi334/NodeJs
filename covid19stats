const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");

const app = express();
app.use(express.json());

let dataBase = null;

const dataBasePath = path.join(__dirname, "covid19India.db");

const initializeDBAndServer = async () => {
  try {
    dataBase = await open({
      filename: dataBasePath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (error) {
    console.log(`DB Error:${error.message}`);
    process.exit(1);
  }
};

initializeDBAndServer();

convertStateDatabaseObjectToResponseObject = (dbObject) => {
  return {
    stateId: dbObject.state_id,
    stateName: dbObject.state_name,
    population: dbObject.population,
  };
};

convertDistrictDatabaseObjectToResponseObject = (dbObject) => {
  return {
    districtId: dbObject.district_id,
    districtName: dbObject.district_name,
    stateId: dbObject.state_id,
    cases: dbObject.cases,
    cured: dbObject.cured,
    active: dbObject.active,
    deaths: dbObject.deaths,
  };
};

app.get("/states/", async (require, response) => {
  const allStatesQuery = `

    SELECT 
* 
    FROM 
state;`;
  const statesList = await dataBase.all(allStatesQuery);
  response.send(
    statesList.map((eachState) =>
      convertStateDatabaseObjectToResponseObject(eachState)
    )
  );
});

app.get("/states/:stateId/", async (request, response) => {
  const { stateId } = request.params;

  const StateQuery = `

    SELECT 
* 
    FROM 
state
WHERE state_id = ${stateId};`;
  const state = await dataBase.get(StateQuery);
  response.send(convertStateDatabaseObjectToResponseObject(state));
});

//create new state

app.post("/districts/", async (request, response) => {
  const districtDetails = request.body;
  const {
    districtName,
    stateId,
    cases,
    cured,
    active,
    deaths,
  } = districtDetails;

  const newDistrictQuery = `
INSERT INTO 
district (state_id, district_name, cases, cured, active, deaths)

VALUES (
    ${stateId},
    '${districtName}',
    ${cases},
    ${cured},
    ${active},
    ${deaths});`;

  await dataBase.run(newDistrictQuery);
  response.send("District Successfully Added");
});

app.get("/districts/:districtId/", async (request, response) => {
  const { districtId } = request.params;
  const getDistrictQuery = `

SELECT 
* 
FROM 
district
WHERE 
 district_id = ${districtId};`;

  const district = await dataBase.get(getDistrictQuery);
  response.send(convertDistrictDatabaseObjectToResponseObject(district));
});

app.delete("/districts/:districtId/", async (request, response) => {
  const { districtId } = request.params;

  const deleteDistrictQuery = `
    DELETE 
FROM 
    district

WHERE district_id = ${districtId};`;
  await dataBase.run(deleteDistrictQuery);
  response.send("District Removed");
});

//UPDATE district Details

app.put("/districts/:districtId/", async (request, response) => {
  const { districtId } = request.params;
  const districtDetails = request.body;

  const {
    districtName,
    stateId,
    cases,
    cured,
    active,
    deaths,
  } = districtDetails;

  const updateDistrictQuery = `
    UPDATE 
    district

    SET 
    district_name = '${districtName}',
    state_id =  ${stateId},
    cases = ${cases},
    cured =  ${cured},
    active = ${active},
    deaths =  ${deaths}
    
    WHERE district_id = ${districtId};`;
  await dataBase.run(updateDistrictQuery);
  response.send("District Details Updated");
});

app.get("/states/:stateId/stats/", async (request, response) => {
  const { stateId } = request.params;
  const getStateStatsQuery = `
    SELECT 
    SUM(cases),
    SUM(cured),
    SUM(active),
    SUM(deaths)

    FROM 
district
WHERE state_id = ${stateId};`;
  const stats = await dataBase.get(getStateStatsQuery);
  response.send({
    totalCases: stats["SUM(cases)"],
    totalCured: stats["SUM(cured)"],
    totalActive: stats["SUM(active)"],
    totalDeaths: stats["SUM(deaths)"],
  });
});

app.get("/districts/:districtId/details/", async (request, response) => {
  const { districtId } = request.params;
  const getStateNameQuery = `
    SELECT 
state_name 
    FROM 
state 
    NATURAL JOIN 
district 
    WHERE district_id = ${districtId};`;

  const state = await dataBase.get(getStateNameQuery);
  response.send({ stateName: state.state_name });
});

module.exports = app;
