const express = require("express");
const path = require("path");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");

const app = express();
app.use(express.json());
const dbPath = path.join(__dirname, "cricketMatchDetails.db");

let db = null;

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DB Error: ${e.message}`);
    process.exit(1);
  }
};
initializeDBAndServer();

const convertPlayerDbObjectToResponseObject = (dbObject) => {
  return {
    playerId: dbObject.player_id,
    playerName: dbObject.player_name,
  };
};

const convertMatchDbObjectToResponseObject = (dbObject) => {
  return {
    matchId: dbObject.match_id,
    match: dbObject.match,
    year: dbObject.year,
  };
};

app.get("/players/", async (request, response) => {
  const allPlayersQuery = `
SELECT 
* 
FROM 
player_details;`;

  const playersList = await db.all(allPlayersQuery);
  response.send(
    playersList.map((eachPlayer) =>
      convertPlayerDbObjectToResponseObject(eachPlayer)
    )
  );
});

app.get("/players/:playerId/", async (request, response) => {
  const { playerId } = request.params;
  const getPlayer = `
    SELECT 
    * 
    FROM 
    player_details

    WHERE player_id = ${playerId};`;

  const player = await db.get(getPlayer);
  response.send(convertPlayerDbObjectToResponseObject(player));
});

app.put("/players/:playerId/", async (request, response) => {
  const { playerId } = request.params;
  const { playerName } = request.body;

  const updatePlayerQuery = `
UPDATE 
player_details 

SET 
player_name = '${playerName}'

WHERE 
player_id = ${playerId};`;

  await db.run(updatePlayerQuery);
  response.send("Player Details Updated");
});

app.get("/matches/:matchId/", async (request, response) => {
  const { matchId } = request.params;

  const getMatchQuery = `
SELECT 
* 
FROM 
match_details

WHERE match_id = ${matchId};`;
  const match = await db.get(getMatchQuery);
  response.send(convertMatchDbObjectToResponseObject(match));
});

app.get("/players/:playerId/matches", async (request, response) => {
  const { playerId } = request.params;

  const allMatchesQuery = `
    SELECT 
    * 
    FROM 
    match_details
    NATURAL JOIN 
    player_match_score
   WHERE  player_id = ${playerId};`;

  const playerAllMatches = await db.all(allMatchesQuery);

  response.send(
    playerAllMatches.map((eachMatch) =>
      convertMatchDbObjectToResponseObject(eachMatch)
    )
  );
});

app.get("/matches/:matchId/players", async (request, response) => {
  const { matchId } = request.params;
  const allPlayersListQuery = `
    SELECT 
    * 
    FROM 
    player_details
    NATURAL JOIN 
    player_match_score
   WHERE  match_id = ${matchId};`;

  const allPlayersDetails = await db.all(allPlayersListQuery);

  response.send(
    allPlayersDetails.map((eachPlayer) =>
      convertPlayerDbObjectToResponseObject(eachPlayer)
    )
  );
});

app.get("/players/:playerId/playerScores", async (request, response) => {
  const { playerId } = request.params;
  const playerStatsQuery = `
    SELECT 
        player_id AS playerId,
        player_name AS playerName,
        SUM(score) AS totalScore,
        SUM(fours) AS totalFours,
        SUM(sixes) AS totalSixes

    FROM 
    player_match_score
    NATURAL JOIN 
    player_details
    
    WHERE player_id = ${playerId};`;

  const playersStatsDetails = await db.get(playerStatsQuery);
  response.send(playersStatsDetails);
});

module.exports = app;
